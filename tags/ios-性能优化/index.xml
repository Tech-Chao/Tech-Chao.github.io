<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS 性能优化 on 咸鱼者说</title>
    <link>https://www.techchao.com/tags/ios-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in iOS 性能优化 on 咸鱼者说</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 15 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.techchao.com/tags/ios-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>iOS 性能优化——启动时间</title>
      <link>https://www.techchao.com/post/ios-performance-optimization-reducing-your-apps-launch-time/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.techchao.com/post/ios-performance-optimization-reducing-your-apps-launch-time/</guid>
      <description>
        
          &lt;blockquote&gt;
&lt;p&gt;本篇是 iOS 性能优化系列的第一篇，讲述关于 App 的启动时长的优化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;用户对于 App 的第一印象就是 App 的启动时长，如果 App 启动的时长过长对于用户的体验可想而知&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2019/423/&#34;&gt;WWDC 2019 Optimizing App Launch&lt;/a&gt;中的将 App 的启动分为冷启动（Cold）、热启动（Warm）和恢复启动（Resume）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Tech-Chao/blog-images/ios/Lanuch_Types.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冷启动（Cold）：系统刚重启后、应用没有在内存中、应用的进程并不在系统中，需要系统创建一个进程分配给它，这是一个完整的启动过程&lt;/li&gt;
&lt;li&gt;热启动（Warm）： 应用刚刚结束、应用的部分资源还在内存中，应用进程不在系统中&lt;/li&gt;
&lt;li&gt;复启动（Resume）：APP 没结束，只是暂停，全在内存中，进程也存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们对 App 启动时长的优化一般针对的是 App 的冷启动时长优化，根据 WWDC 的介绍，如果我们将首屏的渲染时间降低到 400ms（系统启动动画时长） 以内，那么用户的体验将会有极大的提升。&lt;/p&gt;
&lt;p&gt;接下来，让我们按步骤一步步来优化启动时长：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解App启动的各阶段任务&lt;/li&gt;
&lt;li&gt;分析各阶段任务的时长&lt;/li&gt;
&lt;li&gt;有针对性的优化每个步骤的时长&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时为了准确的测量 App 的启动时长，我们对测试环境有一定的要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重启手机并放置一段时间&lt;/li&gt;
&lt;li&gt;设置飞行模式或采用 Mock 网络请求的方式来减少不稳定的网络影响测试数据&lt;/li&gt;
&lt;li&gt;退出 iCloud 账号&lt;/li&gt;
&lt;li&gt;使用 Release 的包进行测试&lt;/li&gt;
&lt;li&gt;采用当前主流的设备，而不是最新或者是太久的手机&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动阶段分析&#34;&gt;启动阶段分析&lt;/h2&gt;
&lt;p&gt;优化之前我们需要知道 App 启动时有哪些阶段，每个阶段都做了哪些事情，有哪些地方是我们可以优化的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Tech-Chao/blog-images/ios/Phases_of_App_Launch.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上6个阶段从系统初始化到 App 初始化，再到 UI 视图的创建和布局，还有 App 数据的异步加载等扩展功能,&lt;/p&gt;
&lt;h3 id=&#34;system-interface&#34;&gt;System Interface&lt;/h3&gt;
&lt;p&gt;在 System Interface 阶段时由操作系统控制，主要包含以下任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加载可执行文件（Mach-O格式）到内存空间&lt;/li&gt;
&lt;li&gt;执行一系列动态链接操作,进行 rebase 指针调整和 bind 符号绑定；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mach-O 文件类型主要分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中间对象文件（MH_OBJECT）&lt;/li&gt;
&lt;li&gt;可执行二进制（MH_EXECUTE）&lt;/li&gt;
&lt;li&gt;VM 共享库文件（MH_FVMLIB）&lt;/li&gt;
&lt;li&gt;Crash 产生的 Core 文件（MH_CORE）&lt;/li&gt;
&lt;li&gt;preload（MH_PRELOAD）&lt;/li&gt;
&lt;li&gt;动态共享库（MH_DYLIB）&lt;/li&gt;
&lt;li&gt;动态链接器（MH_DYLINKER）&lt;/li&gt;
&lt;li&gt;静态链接文件（MH_DYLIB_STUB）符号文件和调试信息（MH_DSYM）这几种。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dyld 动态链接库也是 Mach-o 类型，所以会也会先加载到内存中 ，加载完后dyld会递归加载 App 依赖的动态库，然后执行符号绑定Rebase, Bind。一般应用会加载 100 到 400 个 dylib 文件，幸运是大部分是系统库，且系统会在操作系统启动时计算和缓存系统动态库。&lt;/p&gt;
&lt;h3 id=&#34;runtime-init&#34;&gt;Runtime Init&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Objc 和 Swift 的初始化&lt;/p&gt;
&lt;p&gt;通过_dyld_objc_notify_register注册回调完成相关类的注册，在 image 加载完时初始化语言相关。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加载 category&lt;/p&gt;
&lt;p&gt;在上面语言初始化完之后，会加载所有 category，将 category 的所有方法，协议和属性加载到对应的主类中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用所有+load&lt;/p&gt;
&lt;p&gt;在 image 加载完时，通过load_images 触发，处理该 image 相关的所有+load 方法，按照继承层级依次调用：父类+load→子类+load→category +load，注意 category 的+load 不会覆盖原类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 C++的构造函数属性函数 attribute((constructor))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;uikit-init&#34;&gt;UIKit Init&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实例化 UIApplication 和 UIApplicationDelegate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始事件处理和系统集成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application Init&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这部分是我们熟悉的 UIApplicationDelegate 的几个生命周期调用：&lt;/li&gt;
&lt;li&gt;application:willFinishLaunchingWithOptions:&lt;/li&gt;
&lt;li&gt;application:didFinishLaunchingWithOptions:&lt;/li&gt;
&lt;li&gt;applicationDidBecomeActive:&lt;/li&gt;
&lt;li&gt;scene:willConnectToSession:options:&lt;/li&gt;
&lt;li&gt;sceneWillEnterForeground:&lt;/li&gt;
&lt;li&gt;sceneDidBecomeActive:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;initial-frame-render&#34;&gt;Initial Frame Render&lt;/h3&gt;
&lt;p&gt;首页第一帧的渲染，包含了创建、布局和绘制视图的工作，并把准备好的第一帧提交给渲染层渲染，以下方面会被调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;loadView
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;viewDidLoad
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;layoutSubviews
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;extended&#34;&gt;Extended&lt;/h3&gt;
&lt;p&gt;Extended 主要是一些扩展的任务，苹果给出的定义是在首屏显示后，App 响应用户的操作的同时，可能存在异步请求数据，等到数据返回后重新渲染首页。&lt;/p&gt;
&lt;h2 id=&#34;各阶段优化&#34;&gt;各阶段优化&lt;/h2&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
